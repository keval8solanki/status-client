{"version":3,"sources":["Components/Header.js","Queries/Queries.js","Components/AddCards.js","Components/Card.js","Components/View.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","props","className","onClick","setPage","getCategories","gql","getCards","addCards","selectStyle","boxShadow","compose","graphql","name","useState","setname","price","setprice","category","setcategory","description","setdescription","isDisabled","length","onSubmit","e","preventDefault","console","log","addCard","variables","refetchQueries","query","then","catch","setTimeout","document","getElementById","focus","style","id","onChange","target","value","type","required","placeholder","loading","categories","categoriesOption","map","key","unshift","gettingCategories","disabled","alignSelf","Cards","toggle","settoggle","toggleFullSection","isFlipped","messageStyle","color","textAlign","data","cards","card","index","Card","gettingCards","client","ApolloClient","uri","onError","networkError","graphQLErrors","App","page","setpage","display","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.072dc144.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"header-main-div\">\r\n            <h2 className=\"header-heading\">Status</h2>\r\n            <div className=\"button-div\">\r\n                <button onClick={() => props.setPage('view')} className=\"btn\">View</button>\r\n                <button onClick={() => props.setPage('edit')} className=\"btn\">Add</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { gql } from 'apollo-boost';\r\nimport { useSubscription } from 'react-apollo';\r\n\r\nconst getCategories = gql`\r\n    {\r\n        categories{\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nconst subscribeCard = gql`\r\n    subscription{\r\n        subscribeCard{\r\n            id\r\n            name\r\n            price\r\n    \r\n        }\r\n    }\r\n`\r\n\r\nconst getCards = gql`\r\n    {\r\n        cards{\r\n            id\r\n            name\r\n            price\r\n            description\r\n            category{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst addCards = gql`\r\n    \r\n        mutation($name: String!, $price: String!, $description: String! $category: ID!){\r\n            addCard(name: $name, price: $price, description: $description, categoryID: $category){\r\n                id\r\n                name\r\n            }\r\n        }\r\n    \r\n\r\n`\r\nexport { getCategories, getCards, addCards, subscribeCard }","/*\r\nSolve input field bugs\r\n*/\r\n\r\n\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport { graphql } from 'react-apollo'\r\nimport { compose } from 'recompose';\r\n\r\n\r\nimport { getCategories, addCards, getCards } from '../Queries/Queries';\r\n\r\n\r\n\r\nconst selectStyle = {\r\n    boxShadow: '-2px -2px 4px 0px #ffffff29, 2px 2px 4px 0px #00000080'\r\n}\r\n\r\n\r\n\r\nfunction gettingCategories(props) {\r\n\r\n    let loading = props.categories.loading;\r\n    let categories = props.categories.categories;\r\n    if (loading) {\r\n        return <option >Loading...</option>\r\n    } else if (categories) {\r\n\r\n        let categoriesOption = categories.map((category) => {\r\n            return <option key={category.id} value={category.id} >{category.name}</option>\r\n        })\r\n        categoriesOption.unshift(<option key={0} value={0}>Select Category</option>)\r\n        return categoriesOption\r\n    } else {\r\n        return <option>No Internet</option>\r\n    }\r\n}\r\n\r\nconst AddCards = (props) => {\r\n\r\n    const [name, setname] = useState('')\r\n    const [price, setprice] = useState('')\r\n    const [category, setcategory] = useState('')\r\n    const [description, setdescription] = useState('')\r\n    const [btnClicked, setbtnClicked] = useState(false)\r\n\r\n\r\n    function submitHandler(e) {\r\n        e.preventDefault()\r\n        if (isDisabled()) {\r\n            console.log({\r\n                name,\r\n                price,\r\n                description,\r\n                category\r\n            })\r\n            props.addCard({\r\n                variables: {\r\n                    name,\r\n                    price,\r\n                    description,\r\n                    category\r\n                },\r\n                refetchQueries: [{ query: getCards }]\r\n            }).then(() => {\r\n                console.log('Card Added')\r\n            }).catch(e => {\r\n                console.log(e)\r\n            })\r\n\r\n            setname('')\r\n            setprice('')\r\n            setdescription('')\r\n            setcategory('0')\r\n            setTimeout(() => {\r\n                document.getElementById('name').focus()\r\n            }, 100);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function isDisabled() {\r\n        return name !== '' && name.length < 35 && price !== '' && price.length < 15 && description !== '' && description.length < 140 && (category !== '0' && category !== '')\r\n    }\r\n\r\n\r\n    function checknameValidity() {\r\n        return isNameLong() ? {\r\n            boxShadow: '-2px -2px 4px 0px #ffffff29, 2px 2px 4px 0px #00000080'\r\n        } : {\r\n                boxShadow: 'inset -2px -2px 4px 0px #ffffff29, inset 2px 2px 4px 0px #00000080'\r\n            }\r\n    }\r\n\r\n    function isNameLong() {\r\n        return name.length > 35\r\n    }\r\n\r\n    function isPriceLong() {\r\n        return price.length > 15\r\n    }\r\n\r\n    function checkpriceValidity() {\r\n        return isPriceLong() ? {\r\n            boxShadow: '-2px -2px 4px 0px #ffffff29, 2px 2px 4px 0px #00000080'\r\n        } : {\r\n                boxShadow: 'inset -2px -2px 4px 0px #ffffff29, inset 2px 2px 4px 0px #00000080'\r\n            }\r\n    }\r\n\r\n    function checkdesValidity() {\r\n        return description.length >= 150 ? {\r\n            boxShadow: '-2px -2px 4px 0px #ffffff29, 2px 2px 4px 0px #00000080'\r\n        } : {\r\n                boxShadow: 'inset -2px -2px 4px 0px #ffffff29, inset 2px 2px 4px 0px #00000080'\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-cards-div\">\r\n            <form className=\"input-form\" onSubmit={submitHandler}>\r\n\r\n                <input style={checknameValidity()} id=\"name\" onChange={(e) => setname(e.target.value)} value={name} className=\"input-field\" type=\"text\" required placeholder=\"Template Name\"></input>\r\n                <input style={checkpriceValidity()} onChange={(e) => setprice(e.target.value)} value={price} className=\"input-field\" type=\"number\" required placeholder=\"Price\"></input>\r\n                <textarea style={checkdesValidity()} onChange={(e) => setdescription(e.target.value)} value={description} className=\"input-field\" placeholder=\"Description\"></textarea>\r\n                <select value={category} onChange={e => setcategory(e.target.value)} style={selectStyle} className=\"input-field\">\r\n                    {gettingCategories(props)}\r\n                </select>\r\n                <button disabled={!isDisabled()} style={{ alignSelf: 'center' }} className=\"btn\">Add</button>\r\n            </form>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default compose(\r\n    graphql(getCategories, { name: \"categories\" }),\r\n    graphql(addCards, { name: \"addCard\" })\r\n)(AddCards);\r\n","import React, { useState } from 'react'\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\nconst Cards = (props) => {\r\n    const defaultStyle = { margin: '0px', padding: '0px' }\r\n    const titleStyle = { fontSize: '0.6em', color: '#ffffff3d' };\r\n    const contentStyle = { fontSize: '1.3em', color: '#ffffffcf' };\r\n    const [toggle, settoggle] = useState(false)\r\n    function toggleFullSection() {\r\n        settoggle(!toggle)\r\n        console.log('Flipping')\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n        <ReactCardFlip isFlipped={toggle}>\r\n            <div onClick={toggleFullSection} className=\"card-div\" >\r\n                <p className=\"defaultPStyle card-name\">{props.name}</p>\r\n                <div>\r\n                    <p className=\"shrinkP defaultPStyle\">Category</p>\r\n                    <p className=\"defaultPStyle card-category\">{props.category}</p>\r\n                </div>\r\n\r\n                <p className=\"defaultPStyle card-price\"><span className=\"shrinkP\">Price</span> {props.price}/-</p>\r\n                <p className=\"flip-info\">Tap card to flip</p>\r\n            </div >\r\n\r\n            <div onClick={toggleFullSection} className=\"card-div\"  >\r\n                <p className=\"defaultPStyle card-des\">{props.description}</p>\r\n                <p className=\"flip-info\" >Tap card to flip</p>\r\n            </div>\r\n        </ReactCardFlip>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Cards","import React, { useEffect, useState } from 'react'\r\n\r\nimport Card from './Card';\r\nimport BackCard from './backCard';\r\nimport { graphql } from 'react-apollo'\r\n\r\nimport { getCards } from '../Queries/Queries'\r\n\r\n\r\nconst View = (props) => {\r\n\r\n\r\n    function gettingCards(props) {\r\n        let messageStyle = {\r\n            color: '#ffffff9e',\r\n            textAlign: 'center'\r\n        }\r\n        let loading = props.data.loading\r\n        let cards = props.data.cards\r\n        if (loading) {\r\n            return <p style={messageStyle}>Loading...</p>\r\n        } else if (cards) {\r\n            return cards.map((card, index) => {\r\n\r\n                return <Card key={card.id} name={card.name} category={card.category.name} price={card.price} description={card.description} />\r\n\r\n\r\n\r\n            })\r\n        } else {\r\n            return <p style={messageStyle}>No Internet :(</p>\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"view-div\">\r\n            {gettingCards(props)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default graphql(getCards)(View);","import React, { useState } from 'react';\nimport Header from './Components/Header';\nimport AddCards from './Components/AddCards';\nimport View from './Components/View';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n\nconst client = new ApolloClient({\n  uri: 'https://status-server-8.herokuapp.com/graphql',\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n})\n\nconst App = (props) => {\n  const [page, setpage] = useState('view')\n  const display = page === 'view' ? < View /> : <AddCards />\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Header setPage={setpage} />\n        {display}\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n"],"sourceRoot":""}